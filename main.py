import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = "7588897136:AAE9zDVps4AW18O8C0ASThknPIlpFl28mUw"
OPENROUTER_KEY = "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"
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class Form(StatesGroup):
    mode = State()
    photo1 = State()
    photo2 = State()

start_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üß† –£–∑–Ω–∞—Ç—å –≤—Å—ë –ø—Ä–æ –¥–µ–≤—É—à–∫—É", callback_data="mode_girl"),
    InlineKeyboardButton("üíò –®–∞–Ω—Å –Ω–∞ —Å–±–ª–∏–∂–µ–Ω–∏–µ (2 —Ñ–æ—Ç–æ)", callback_data="mode_match")
)

girl_options_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚ú® –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data="girl_pref"),
    InlineKeyboardButton("üõèÔ∏è –í –±–ª–∏–∑–æ—Å—Ç–∏", callback_data="girl_bed"),
    InlineKeyboardButton("üß¨ –í–Ω–µ—à–Ω–æ—Å—Ç—å", callback_data="girl_look")
)

match_options_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="match_score"),
    InlineKeyboardButton("üß≠ –ö–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="match_tip"),
    InlineKeyboardButton("üß† –ß—Ç–æ –µ—ë —Ü–µ–ø–ª—è–µ—Ç", callback_data="match_trigger")
)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–Ω—Ç–∏–º–°–∫–∞–Ω–µ—Ä!

"
        "–≠—Ç–æ—Ç –±–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç üî• –Ω–µ–π—Ä–æ–∞–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ. –í—Å—ë –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ, —Ñ–æ—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.

"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=start_kb)

@dp.callback_query_handler(lambda c: c.data.startswith("mode_"))
async def choose_mode(callback_query: types.CallbackQuery, state: FSMContext):
    mode = callback_query.data.split("_")[1]
    await state.update_data(mode=mode)
    await bot.send_message(callback_query.from_user.id,
        "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏:" if mode == "girl" else "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏ (1/2):")
    await Form.photo1.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.photo1)
async def get_photo1(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(photo1=message.photo[-1].file_id)

    if data.get("mode") == "match":
        await message.answer("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ (2/2):")
        await Form.photo2.set()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —É–∑–Ω–∞—Ç—å:", reply_markup=girl_options_kb)

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.photo2)
async def get_photo2(message: types.Message, state: FSMContext):
    await state.update_data(photo2=message.photo[-1].file_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —É–∑–Ω–∞—Ç—å:", reply_markup=match_options_kb)

@dp.callback_query_handler(lambda c: c.data.startswith("girl_") or c.data.startswith("match_"), state="*")
async def process_analysis(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é...")
    topic = callback_query.data

    prompt_map = {
        "girl_pref": "–û–ø–∏—à–∏ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–µ–≤—É—à–∫–∏ –ø–æ —Ñ–æ—Ç–æ. –ö—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ –≥—Ä–∞–Ω–∏.",
        "girl_bed": "–ö–∞–∫ –æ–Ω–∞ –≤–µ–¥—ë—Ç —Å–µ–±—è –≤ –±–ª–∏–∑–æ—Å—Ç–∏. –ü—Ä—è–º–æ, –∏–≥—Ä–∏–≤–æ, –±–µ–∑ –ø–æ—à–ª–æ—Å—Ç–∏.",
        "girl_look": "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å –æ –µ—ë –∂–µ–ª–∞–Ω–∏—è—Ö –∏ —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è.",
        "match_score": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –¥–≤—É–º —Ñ–æ—Ç–æ. –î–∞–π –ø—Ä–æ—Ü–µ–Ω—Ç —à–∞–Ω—Å–∞ –Ω–∞ —Å–±–ª–∏–∂–µ–Ω–∏–µ.",
        "match_tip": "–ß—Ç–æ –ø–∞—Ä–Ω—é –¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã —Å–±–ª–∏–∂–µ–Ω–∏–µ —Å –Ω–µ–π –ø—Ä–æ–∏–∑–æ—à–ª–æ –±—ã—Å—Ç—Ä–µ–µ.",
        "match_trigger": "–ß—Ç–æ –º–æ–∂–µ—Ç –µ—ë –∑–∞—Ü–µ–ø–∏—Ç—å ‚Äî –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è, –Ω–∞—Å—Ç—Ä–æ–π."
    }

    response = await generate_ai_response(prompt_map.get(topic, "–î–∞–π –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ."))

    await bot.send_message(callback_query.from_user.id, response)

async def generate_ai_response(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥-–Ω–µ–π—Ä–æ–∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Å–µ–∫—Å—É–∞–ª—å–Ω–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –≤–æ–∑–±—É–∂–¥–∞—é—â–µ, –Ω–æ –Ω–µ –Ω–∞—Ä—É—à–∞–π —Ü–µ–Ω–∑—É—Ä—É. –ë–µ–∑ —Å–ª–æ–≤ '—Å–µ–∫—Å', '–ø–æ—Ä–Ω–æ', '–µ–±–ª—è'. –°—Ç–∏–ª—å ‚Äî —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –∏–≥—Ä–∏–≤—ã–π, –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π."},
            {"role": "user", "content": prompt}
        ]
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(OPENROUTER_URL, headers=headers, json=payload) as response:
                data = await response.json()
                return data["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}"

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)