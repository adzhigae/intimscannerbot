import os
import openai
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, executor

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL = os.getenv("MODEL", "gpt-3.5-turbo")

if not BOT_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("BOT_TOKEN –∏–ª–∏ OPENROUTER_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

openai.api_key = OPENROUTER_API_KEY
openai.api_base = "https://openrouter.ai/api/v1"

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –¥–∞–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ üòâ")

@dp.message_handler()
async def analyze_message(message: types.Message):
    await message.chat.do("typing")
    try:
        response = openai.ChatCompletion.create(
            model=MODEL,
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ, –∫–∞–∫ –ø—Å–∏—Ö–æ–ª–æ–≥-—Ñ–ª–∏—Ä—Ç–æ–ª–æ–≥. –ë–µ–∑ –≥—Ä—É–±–æ—Å—Ç–µ–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å —é–º–æ—Ä–æ–º."},
                {"role": "user", "content": message.text}
            ]
        )
        reply = response['choices'][0]['message']['content']
        await message.reply(reply)
    except Exception as e:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á OpenRouter.\n" + str(e))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
