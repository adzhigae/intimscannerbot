import asyncio
import os
import requests
import json
import random
import threading



from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import URLInputFile
from aiogram.types import BotCommand
from aiohttp import web


AGREEMENT_LINK = "https://telegra.ph/Polzovatelskoe-soglashenie-IntimScannerBot-05-03"


from stats import update_user_stat, get_global_stats, get_all_user_stats

# ========================== –ë–õ–û–ö 1: –ò–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========================

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")  # –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç Telegram –±–æ—Ç–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ========================== –ë–õ–û–ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ==========================

# –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ templates.json
with open("templates.json", "r", encoding="utf-8") as file:
    TEMPLATES = json.load(file)

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
used_templates = {}

def get_unique_template(user_id: int, trait: str) -> str:
    all_templates = TEMPLATES.get(trait, [])
    used = used_templates.get(user_id, {}).get(trait, [])

    available = [t for i, t in enumerate(all_templates) if i not in used]

    if not available:
        # –í—Å—ë –ø–æ–∫–∞–∑–∞–Ω–æ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        used_templates[user_id][trait] = []
        available = all_templates[:]

    selected = random.choice(available)
    selected_index = all_templates.index(selected)

    if user_id not in used_templates:
        used_templates[user_id] = {}
    if trait not in used_templates[user_id]:
        used_templates[user_id][trait] = []

    used_templates[user_id][trait].append(selected_index)

    return selected

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
BUTTON_TITLES = {
    "lust": "üíã –û —á—ë–º –º–µ—á—Ç–∞–µ—Ç –Ω–æ—á—å—é",
    "money": "üíé –í–∞–∂–Ω—ã –ª–∏ –¥–µ–Ω—å–≥–∏?",
    "power": "üéØ –ü–æ–¥–¥–∞–µ—Ç—Å—è –ª–∏ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—é?"
}



# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
PROMO_TEXT = """üß† –£—á—ë–Ω—ã–µ –¥–æ–∫–∞–∑–∞–ª–∏: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç 300+ —Ç–∏–ø–æ–≤ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –æ—Ç—Ä–∞–∂–∞—é—â–∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏–µ.

–¢—ã —É–∑–Ω–∞–µ—à—å:
‚Ä¢ –ù–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ —Å–∫–ª–æ–Ω–Ω–∞ –∫ —Ñ–ª–∏—Ä—Ç—É üòè  
‚Ä¢ –°—Ç–æ–∏—Ç –ª–∏ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –Ω–µ—ë –≤—Ä–µ–º—è ‚åõÔ∏è
‚Ä¢ –ö–∞–∫ —Ä–∞–∑–∂–µ—á—å –º–µ–∂–¥—É –≤–∞–º–∏ –∏—Å–∫—Ä—É ‚ù§Ô∏è‚Äçüî•

ü§ñ –Ø —É–º–µ—é:
üì∏ –î–µ–ª–∞—Ç—å AI-–∞–Ω–∞–ª–∏–∑ –ø–æ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ
üí¨ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –æ–±—â–µ–Ω–∏–∏ –∏ –±–ª–∏–∑–æ—Å—Ç–∏
üí∞ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å—Ç–∞—Ç—É—Å—É –∏–ª–∏ –≤—ã–≥–æ–¥–µ
üóù –ò —É–∑–Ω–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –µ—ë –¥–æ–±–∏—Ç—å—Å—è

–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏ ‚Äî –∏ —è –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∂—É. –ê–Ω–æ–Ω–∏–º–Ω–æ, –±—ã—Å—Ç—Ä–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤üòà"""

# –¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Ç–∫–∞–∑–æ–º –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (/about)
DISCLAIMER = """üë®‚Äç‚öñÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ –∏ –æ—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</b>

<b>IntimScannerBot</b> ‚Äî —ç—Ç–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π Telegram-–±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–ª–∏—Ä—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.

<b>‚ùó–î–∏—Å–∫–ª–µ–π–º–µ—Ä:</b>  
‚Ä¢ –í—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è ‚Äî —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏, –Ω–µ –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.  
‚Ä¢ –ë–æ—Ç –Ω–µ –¥–∞—ë—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –ª–∏—á–Ω–æ—Å—Ç–∏, –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏.  
‚Ä¢ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.  
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ ‚Äî –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ. –û—Ç–≤–µ—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–æ–≤–µ—Ç–æ–º –∏–ª–∏ —Ñ–∞–∫—Ç–æ–º.  
‚Ä¢ –ë–æ—Ç –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É Telegram –∏–ª–∏ OpenAI –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç NSFW.

üí¨ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏ —ç—Ç–∏–∫–µ."""

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_data = {}

# ========================== –ë–õ–û–ö 2: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —à–∞–±–ª–æ–Ω—ã –∏ –∫–Ω–æ–ø–∫–∏ ==========================

MENU_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=BUTTON_TITLES["lust"], callback_data="lust")],
        [InlineKeyboardButton(text=BUTTON_TITLES["money"], callback_data="money")],
        [InlineKeyboardButton(text=BUTTON_TITLES["power"], callback_data="power")]
    ]
)
# ========================== –ë–õ–û–ö 3: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ==============================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    cid = message.chat.id

    if cid not in user_data:
        user_data[cid] = {}

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ
    if not user_data[cid].get("agreement_accepted"):
        agreement_text = (
            f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å "
            f"<a href='{AGREEMENT_LINK}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a>\n\n"
            f"‚ö†Ô∏è –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–Ø —Å–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ "
            f"–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –µ–≥–æ —É—Å–ª–æ–≤–∏—è!"
        )

        agree_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree_terms")]
        ])

        await message.answer(agreement_text, reply_markup=agree_kb, disable_web_page_preview=False)
        return

    # –ï—Å–ª–∏ —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è ‚Äî –ø—Ä–æ–º–æ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
    update_user_stat(cid)

    if not user_data[cid].get("promo_sent"):
        await message.answer(PROMO_TEXT)
        user_data[cid]["promo_sent"] = True

        async def reminder():
            await asyncio.sleep(90)
            if 'photo_id' not in user_data.get(cid, {}):
                try:
                    await bot.send_message(cid, "üì∏ –ù–µ –∑–∞–±—É–¥—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏...")
                except:
                    pass

        asyncio.create_task(reminder())

    if user_data[cid].get("photo_id"):
        await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ üëá", reply_markup=MENU_MARKUP)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ–¥–∏–Ω —Ä–∞–∑)
    if not user_data[cid].get("notified_admin"):
        try:
            await bot.send_message(ADMIN_ID, f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {cid})")
            user_data[cid]["notified_admin"] = True
        except:
            pass

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    await message.answer("üìå –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏. –Ø –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞. –í—Å—ë –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üòâ")




# ========================== –ë–õ–û–ö 8: –ö–Ω–æ–ø–∫–∞ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ' ==========================

@dp.message(F.photo)
async def handle_photo(message: Message):
    cid = message.chat.id  # ID —á–∞—Ç–∞
    fid = message.photo[-1].file_id  # ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ

    if not user_data.get(cid, {}).get("agreement_accepted"):
        await message.answer("‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω¬ª –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–∏ –≤—ã—à–µ.")
        return



    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ –∂–µ —Ñ–æ—Ç–æ –¥–≤–∞–∂–¥—ã ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å
    if cid in user_data and user_data[cid].get('photo_id') == fid:
        await message.answer("üîÅ –≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
    file = await bot.get_file(fid)
    img_bytes = requests.get(f"https://api.telegram.org/file/bot{API_TOKEN}/{file.file_path}").content

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –∏–º–µ–Ω–Ω–æ –∂–µ–Ω—Å–∫–æ–µ –ª–∏—Ü–æ
    if not await is_female_face(img_bytes):
        await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏ (–æ–¥–Ω–æ –ª–∏—Ü–æ, –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π). –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞
    user_data[cid] = {'photo_id': fid, 'analyzed': {}, 'menu_msg_id': None}
    update_user_stat(cid, "photo")  # –ª–æ–≥ —Ñ–æ—Ç–æ

    msg = await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ üëá", reply_markup=MENU_MARKUP)
    user_data[cid]['menu_msg_id'] = msg.message_id

# ========================== –ë–õ–û–ö 9: –ö–Ω–æ–ø–∫–∞ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑' ==============================

@dp.callback_query(F.data == "get_instruction")
async def handle_get_instruction(call: CallbackQuery):
    cid = call.message.chat.id

    if user_data.get(cid, {}).get("instruction_shown"):
        # –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
        return

    text = (
        "üîì <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫. –≠—Ç–æ –ø–æ—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–∞–∫ –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –Ω–∞—Å—Ç–æ—è—â–µ–π –∏—Å–∫—Ä—ã.</b>\n"
        "–¢—ã –ø–æ–π–º—ë—à—å, –∫–æ–≥–¥–∞ –≤–∫–ª—é—á–∏—Ç—å—Å—è, –∫–æ–≥–¥–∞ –æ—Ç—Å—Ç—É–ø–∏—Ç—å ‚Äî –∏ –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–µ –Ω–∞–¥–æ–ª–≥–æ.\n\n"
        "‚úÖ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏ –≤—Å—ë."
    )

    final_payment_kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤, –ø–æ–∫–∞–∂–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data="show_payment")
    ]])

    await call.message.edit_text(text, reply_markup=final_payment_kb)



@dp.callback_query(F.data == "show_payment")
async def handle_show_payment(call: CallbackQuery):
    cid = call.message.chat.id

    # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if user_data.get(cid, {}).get("instruction_paid_shown"):
        return

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –°–†–ê–ó–£
    try:
        disabled_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...", callback_data="noop")]
        ])
        await call.message.edit_reply_markup(reply_markup=disabled_kb)
    except:
        pass

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –Ω–∞–∂–∞—Ç–∞
    user_data[cid]["instruction_paid_shown"] = True

    steps = [
        "üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ –±–∞–∑–µ –∫–µ–π—Å–æ–≤... (11 000+ –∑–∞–ø–∏—Å–µ–π)",
        "üìä –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å–∏–≥–Ω–∞–ª—ã, –≤–∑–≥–ª—è–¥—ã, –º–∏–∫—Ä–æ—ç–º–æ—Ü–∏–∏ ‚Äî –≤—Å—ë, —á—Ç–æ —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å —Ñ–æ—Ç–æ...",
        "üß† –°—Ç—Ä–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."
    ]

    msg = await call.message.answer(steps[0])
    for step in steps[1:]:
        await asyncio.sleep(3)
        try:
            await msg.edit_text(step)
        except:
            pass
    await asyncio.sleep(1)

    payment_link = (
        f"https://yoomoney.ru/quickpay/shop-widget?"
        f"writer=seller&targets=–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è&default-sum=99"
        f"&button-text=14&quickpay=shop&account=410011234567890"
        f"&label={cid}&successURL=https://yourdomain.com/success"
    )

    payment_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å (50 —Ä—É–±–ª–µ–π)", url=payment_link)]
    ])

    await msg.edit_text("üöÄ –í—Å—ë –≥–æ—Ç–æ–≤–æ. –ñ–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—É–¥–µ—Ç —Ç–≤–æ–µ–π. –ì–æ—Ç–æ–≤?", reply_markup=payment_kb)


    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–æ
    user_data[cid]["instruction_paid_shown"] = True

    # –î–µ–ª–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
    try:
        disabled_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É–∂–µ –∑–∞–ø—Ä–æ—à–µ–Ω–∞", callback_data="noop")]
        ])
        await call.message.edit_reply_markup(reply_markup=disabled_kb)
    except:
        pass

        # –ñ–¥—ë–º 3 –º–∏–Ω—É—Ç—ã ‚Äî –µ—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º
    await asyncio.sleep(180)
    if not user_data.get(cid, {}).get("payment_received"):
        try:
            await bot.send_message(cid, "üëÄ –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª? –ù–∞–ø–æ–º–∏–Ω–∞—é, —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ –µ—ë —Ç–∏–ø–∞–∂—É –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ üîì", reply_markup=payment_kb)
        except:
            pass



@dp.callback_query(F.data == "agree_terms")
async def handle_agree_terms(call: CallbackQuery):
    cid = call.message.chat.id
    user_data[cid] = user_data.get(cid, {})
    user_data[cid]["agreement_accepted"] = True

    await call.message.delete()
    await call.message.answer(PROMO_TEXT)

    # –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É
    async def reminder():
        await asyncio.sleep(90)
        if 'photo_id' not in user_data.get(cid, {}):
            try:
                await bot.send_message(cid, "üì∏ –ù–µ –∑–∞–±—É–¥—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏...")
            except:
                pass

    asyncio.create_task(reminder())


@dp.callback_query(F.data.in_(["lust", "money", "power"]))
async def handle_analysis(call: CallbackQuery):
    cid, trait = call.message.chat.id, call.data

    analysis_steps = {
        "lust": [
            "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ 11 286 –∫–µ–π—Å–∞–º...",
            "üíì –°–∫–∞–Ω–∏—Ä—É–µ–º –∏–º–ø—É–ª—å—Å—ã –∏ –º–∏–∫—Ä–æ—Ä–µ–∞–∫—Ü–∏–∏...",
            "üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ñ–ª–∏—Ä—Ç–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...",
            "üß¨ –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
        ],
        "money": [
            "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ 11 286 –∫–µ–π—Å–∞–º....",
            "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å—Ç–∞—Ç—É—Å –∏ —Ä–µ—Å—É—Ä—Å—ã...",
            "üß† –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–∏–ø–∞–∂–∞–º–∏, —Å–∫–ª–æ–Ω–Ω—ã–º–∏ –∫ –≤—ã–≥–æ–¥–µ...",
            "üîé –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–º—É..."
        ],
        "power": [
            "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ 11 286 –∫–µ–π—Å–∞–º...",
            "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è...",
            "üìä –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∫–µ–π—Å–∞–º–∏ –≤–ª–∏—è–Ω–∏—è –∏ –≤–ª–∞—Å—Ç–∏...",
            "üß¨ –°—Ç—Ä–æ–∏–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å –≤–ª–∞—Å—Ç–∏/–ø–æ–¥—á–∏–Ω–µ–Ω–∏—è..."
        ]
    }


    steps = analysis_steps.get(trait, ["üîç –ê–Ω–∞–ª–∏–∑..."])


    if user_data[cid].get("is_processing"):
        await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏, –∏–¥—ë—Ç –∞–Ω–∞–ª–∏–∑...", show_alert=False)
        return
    user_data[cid]["is_processing"] = True

    if 'results' not in user_data[cid]:
        user_data[cid]['results'] = {}

    if trait in user_data[cid]['results']:
        user_data[cid]["is_processing"] = False
        result = user_data[cid]['results'][trait]
        await call.message.edit_text(
            f"{BUTTON_TITLES[trait]}\n\n{result}",
            reply_markup=MENU_MARKUP
        )
        return

    await call.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... üîç")

    status_msg = await call.message.answer(steps[0])
    for step in steps[1:]:
        await asyncio.sleep(2)
        try:
            await status_msg.edit_text(step)
        except:
            pass
    await asyncio.sleep(2)
    try:
        await status_msg.delete()
    except:
        pass

    result = get_unique_template(cid, trait)
    user_data[cid]['results'][trait] = result
    user_data[cid]['analyzed'][trait] = True
    user_data[cid]["is_processing"] = False

    await call.message.edit_text(
        f"{BUTTON_TITLES[trait]}\n\n{result}",
        reply_markup=MENU_MARKUP
    )

    if all(user_data[cid]['analyzed'].get(t) for t in BUTTON_TITLES.keys()):
        await asyncio.sleep(7)

        final_text = (
            "üíã <b>–ú—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –µ—ë –≤–∫–ª—é—á–∞–µ—Ç.</b>\n"
            "üëÅ –≠—Ç–æ –Ω–µ –ø—Ä–æ –±–∞–Ω–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –∞ –ø—Ä–æ –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ –≤–∑–≥–ª—è–¥ –≥–æ–≤–æ—Ä–∏—Ç –±–æ–ª—å—à–µ —Å–ª–æ–≤.\n"
            "üî• –ö–∞–∫ –≤–µ—Å—Ç–∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º ‚Äî –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è, –Ω–æ —Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∞ –∑–∞–ø–æ–º–Ω–∏—Ç.\n"
            "üïØ –°—Ü–µ–Ω–∞—Ä–∏–π, –≥–¥–µ —Ç—ã —Ç–æ—Ç, –∫—Ç–æ –∑–Ω–∞–µ—Ç, –∫–æ–≥–¥–∞ –±—ã—Ç—å —Ä—è–¥–æ–º‚Ä¶ –∏ –∫–æ–≥–¥–∞ –ø—Ä–æ–ø–∞—Å—Ç—å.\n\n"
            "üëá <b>–•–æ—á–µ—à—å –∑–Ω–∞—Ç—å, –∫–∞–∫ —Å—ã–≥—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ?</b> –ñ–º–∏ ‚Äî –ø–æ–∫–∞–∂—É, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏."
        )

        first_heat_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìò –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —à–∞–≥–∞–º", callback_data="get_instruction")]
        ])

        await bot.send_message(cid, final_text, reply_markup=first_heat_kb)











from aiogram import Router, F
from aiogram.types import Message
import tempfile
import os
from deepface import DeepFace
from aiogram.types import BotCommand


# ========================== –ë–õ–û–ö 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–µ–Ω—Å–∫–æ–≥–æ –ª–∏—Ü–∞ —Å –ø–æ–º–æ—â—å—é DeepFace =============

async def is_female_face(img_bytes) -> bool:
    import tempfile
    import os
    from deepface import DeepFace

    with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp:
        tmp.write(img_bytes)
        tmp_path = tmp.name

    try:
        result = DeepFace.analyze(
            img_path=tmp_path,
            actions=["gender"],
            enforce_detection=False
        )
        gender = result[0]["dominant_gender"].lower()
        print(f"[DEBUG] DeepFace –æ–ø—Ä–µ–¥–µ–ª–∏–ª: {gender}")
        return gender == "woman"
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ DeepFace:", e)
        return False
    finally:
        os.remove(tmp_path)



    cid = message.chat.id
    photo = message.photo[-1]
    fid = photo.file_id

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
    user_data[cid] = {'photo_id': fid}

    photo_file = await message.bot.get_file(fid)
    file_path = photo_file.file_path
    img_bytes = await message.bot.download_file(file_path)
    img_bytes = img_bytes.read()

    if not await is_female_face(img_bytes):
        await message.answer("‚ùå –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∂–µ–Ω—Å–∫–∏–º–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    await message.answer("‚úÖ –î–µ–≤—É—à–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
    # –î–∞–ª–µ–µ —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞




ADMIN_ID = 5236431337  # —Ç–≤–æ–π Telegram ID

# ========================== –ë–õ–û–ö 11: –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ======================

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    from stats import get_global_stats, get_all_user_stats

    data = get_global_stats()
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['total_users']}\n"
        f"üì∏ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ: {data['photo_users']}\n"
        f"üí≥ –ù–∞–∂–∞–ª–∏ –æ–ø–ª–∞—Ç—É: {data['paid_users']}\n"
        f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –±–æ—Ç–µ: {data['avg_minutes']} –º–∏–Ω\n"
        f"üïì –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {data['active_today']} —á–µ–ª\n\n"
        f"<b>üßæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n{get_all_user_stats()}"
    )

    await message.answer(text)



# ========================== –ë–õ–û–ö 12: –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ =====================

@dp.message(F.text)
async def any_text(message: Message):
    cid = message.chat.id

    if not user_data.get(cid, {}).get("agreement_accepted"):
        await message.answer("‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω¬ª –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–∏ –≤—ã—à–µ.")
        return

    await message.answer("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏, –∏ —è —Å–¥–µ–ª–∞—é AI-–∞–Ω–∞–ª–∏–∑ üòâ")


# ========================== –ë–õ–û–ö 13: –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===================================

from aiohttp import web
import threading

# ========================== –ë–õ–û–ö 13: –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===================================

from aiohttp import web

async def handle(request):
    return web.Response(text="Bot is running")

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ó–∞–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
    app = web.Application()
    app.router.add_get("/", handle)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, port=10000)
    await site.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.delete_my_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



    from aiohttp import web

    # ========================== –ë–õ–û–ö 14: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã ==============================

async def on_payment_success(request):
    data = await request.post()
    cid = data.get("label")

    if cid:
        try:
            cid = int(cid)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(cid, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!\n\nüìò –í–æ—Ç —Ç–≤–æ—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
                "1. –û—Ü–µ–Ω–∏ –µ—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –∞ –Ω–µ —Å–ª–æ–≤–∞.\n"
                "2. –î–∞–π –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–≤–æ—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.\n"
                "3. –ò—Å–ø–æ–ª—å–∑—É–π –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ –æ–Ω–∞ —Å–±–∏—Ç–∞ —Å —Ç–æ–ª–∫—É ‚Äî —ç—Ç–æ —à–∞–Ω—Å –ø—Ä–æ—è–≤–∏—Ç—å—Å—è.\n"
                "4. –û—Å—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–∑–∂–µ üòâ")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥–∞–π–¥–∞413879413879
            await bot.send_message(cid, "üìò <b>–ì–∞–π–¥ –ø–æ —à–∞–≥–∞–º:</b>\n\n"
                "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ü–µ–ø–∏ –≤–Ω–∏–º–∞–Ω–∏–µ ‚Äî —Ñ—Ä–∞–∑–æ–π –∏–ª–∏ –≤–∑–≥–ª—è–¥–æ–º.\n"
                "2Ô∏è‚É£ –£–ª–æ–≤–∏ –µ—ë —Ä–µ–∞–∫—Ü–∏—é: –µ—Å–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å ‚Äî —ç—Ç–æ –≤—Ö–æ–¥.\n"
                "3Ô∏è‚É£ –°–¥–µ–ª–∞–π —à–∞–≥ –≤–ø–µ—Ä—ë–¥, –Ω–æ –Ω–µ –¥–∞–≤–∏. –ü–æ–∫–∞–∂–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.\n"
                "4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–π –∑–∞–≥–∞–¥–∫—É: –Ω–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–π –≤—Å—ë —Å—Ä–∞–∑—É.\n"
                "5Ô∏è‚É£ –°–æ–∑–¥–∞–π –º–∏–∫—Ä–æ–¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏ –ø—Ä–æ—è–≤–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–µ.\n\n"
                "‚ú® –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –±—ã—Ç—å —Ç–µ–º, –∫—Ç–æ –Ω–µ –±–æ–∏—Ç—Å—è –∏–≥—Ä—ã.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await bot.send_message(ADMIN_ID, f"üì• <b>–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞</b> –æ—Ç <code>{cid}</code>")

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", e)

    return web.Response(text="OK")
